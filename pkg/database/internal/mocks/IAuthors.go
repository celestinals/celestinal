// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	internal "github.com/tickexvn/tickex/pkg/database/internal"
)

// IAuthors is an autogenerated mock type for the IAuthors type
type IAuthors struct {
	mock.Mock
}

type IAuthors_Expecter struct {
	mock *mock.Mock
}

func (_m *IAuthors) EXPECT() *IAuthors_Expecter {
	return &IAuthors_Expecter{mock: &_m.Mock}
}

// Count provides a mock function with given fields: ctx
func (_m *IAuthors) Count(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IAuthors_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type IAuthors_Count_Call struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
//   - ctx context.Context
func (_e *IAuthors_Expecter) Count(ctx interface{}) *IAuthors_Count_Call {
	return &IAuthors_Count_Call{Call: _e.mock.On("Count", ctx)}
}

func (_c *IAuthors_Count_Call) Run(run func(ctx context.Context)) *IAuthors_Count_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *IAuthors_Count_Call) Return(_a0 int64, _a1 error) *IAuthors_Count_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IAuthors_Count_Call) RunAndReturn(run func(context.Context) (int64, error)) *IAuthors_Count_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, author
func (_m *IAuthors) Create(ctx context.Context, author internal.Authors) (internal.Authors, error) {
	ret := _m.Called(ctx, author)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 internal.Authors
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, internal.Authors) (internal.Authors, error)); ok {
		return rf(ctx, author)
	}
	if rf, ok := ret.Get(0).(func(context.Context, internal.Authors) internal.Authors); ok {
		r0 = rf(ctx, author)
	} else {
		r0 = ret.Get(0).(internal.Authors)
	}

	if rf, ok := ret.Get(1).(func(context.Context, internal.Authors) error); ok {
		r1 = rf(ctx, author)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IAuthors_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type IAuthors_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - author internal.Authors
func (_e *IAuthors_Expecter) Create(ctx interface{}, author interface{}) *IAuthors_Create_Call {
	return &IAuthors_Create_Call{Call: _e.mock.On("Create", ctx, author)}
}

func (_c *IAuthors_Create_Call) Run(run func(ctx context.Context, author internal.Authors)) *IAuthors_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(internal.Authors))
	})
	return _c
}

func (_c *IAuthors_Create_Call) Return(_a0 internal.Authors, _a1 error) *IAuthors_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IAuthors_Create_Call) RunAndReturn(run func(context.Context, internal.Authors) (internal.Authors, error)) *IAuthors_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *IAuthors) Delete(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IAuthors_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type IAuthors_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *IAuthors_Expecter) Delete(ctx interface{}, id interface{}) *IAuthors_Delete_Call {
	return &IAuthors_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *IAuthors_Delete_Call) Run(run func(ctx context.Context, id int64)) *IAuthors_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *IAuthors_Delete_Call) Return(_a0 error) *IAuthors_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IAuthors_Delete_Call) RunAndReturn(run func(context.Context, int64) error) *IAuthors_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function with given fields: ctx, id
func (_m *IAuthors) Exists(ctx context.Context, id int64) (bool, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (bool, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IAuthors_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type IAuthors_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *IAuthors_Expecter) Exists(ctx interface{}, id interface{}) *IAuthors_Exists_Call {
	return &IAuthors_Exists_Call{Call: _e.mock.On("Exists", ctx, id)}
}

func (_c *IAuthors_Exists_Call) Run(run func(ctx context.Context, id int64)) *IAuthors_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *IAuthors_Exists_Call) Return(_a0 bool, _a1 error) *IAuthors_Exists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IAuthors_Exists_Call) RunAndReturn(run func(context.Context, int64) (bool, error)) *IAuthors_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *IAuthors) Get(ctx context.Context, id int64) (internal.Authors, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 internal.Authors
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (internal.Authors, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) internal.Authors); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(internal.Authors)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IAuthors_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type IAuthors_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *IAuthors_Expecter) Get(ctx interface{}, id interface{}) *IAuthors_Get_Call {
	return &IAuthors_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *IAuthors_Get_Call) Run(run func(ctx context.Context, id int64)) *IAuthors_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *IAuthors_Get_Call) Return(_a0 internal.Authors, _a1 error) *IAuthors_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IAuthors_Get_Call) RunAndReturn(run func(context.Context, int64) (internal.Authors, error)) *IAuthors_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: ctx
func (_m *IAuthors) GetAll(ctx context.Context) ([]internal.Authors, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []internal.Authors
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]internal.Authors, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []internal.Authors); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]internal.Authors)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IAuthors_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type IAuthors_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *IAuthors_Expecter) GetAll(ctx interface{}) *IAuthors_GetAll_Call {
	return &IAuthors_GetAll_Call{Call: _e.mock.On("GetAll", ctx)}
}

func (_c *IAuthors_GetAll_Call) Run(run func(ctx context.Context)) *IAuthors_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *IAuthors_GetAll_Call) Return(_a0 []internal.Authors, _a1 error) *IAuthors_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IAuthors_GetAll_Call) RunAndReturn(run func(context.Context) ([]internal.Authors, error)) *IAuthors_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, id, author
func (_m *IAuthors) Update(ctx context.Context, id int64, author internal.Authors) (internal.Authors, error) {
	ret := _m.Called(ctx, id, author)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 internal.Authors
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, internal.Authors) (internal.Authors, error)); ok {
		return rf(ctx, id, author)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, internal.Authors) internal.Authors); ok {
		r0 = rf(ctx, id, author)
	} else {
		r0 = ret.Get(0).(internal.Authors)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, internal.Authors) error); ok {
		r1 = rf(ctx, id, author)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IAuthors_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type IAuthors_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
//   - author internal.Authors
func (_e *IAuthors_Expecter) Update(ctx interface{}, id interface{}, author interface{}) *IAuthors_Update_Call {
	return &IAuthors_Update_Call{Call: _e.mock.On("Update", ctx, id, author)}
}

func (_c *IAuthors_Update_Call) Run(run func(ctx context.Context, id int64, author internal.Authors)) *IAuthors_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(internal.Authors))
	})
	return _c
}

func (_c *IAuthors_Update_Call) Return(_a0 internal.Authors, _a1 error) *IAuthors_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IAuthors_Update_Call) RunAndReturn(run func(context.Context, int64, internal.Authors) (internal.Authors, error)) *IAuthors_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewIAuthors creates a new instance of IAuthors. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIAuthors(t interface {
	mock.TestingT
	Cleanup(func())
}) *IAuthors {
	mock := &IAuthors{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
