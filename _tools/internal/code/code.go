/*
 * Copyright 2025 The Celestinal Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package code

import (
	"fmt"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
)

// GenerateFile generates a _celestinal.pb.go file containing gRPC service definitions.
func GenerateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	filename := file.GeneratedFilenamePrefix + "_celestinal.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-celestinal. DO NOT EDIT.")
	g.P("// Copyright 2025 Duc-Hung Ho")
	g.P()

	g.P("package ", file.GoPackageName)
	g.P("\n")
	g.P("import (")
	g.P("\t\"fmt\"\n")
	g.P()
	g.P("\t\"github.com/celestinals/celestinal/api/gen/go/celestinal/v1\"\n")
	g.P(")")
	g.P("\n")
	g.P("var (")
	g.P("\t_ celestinal.Empty")
	g.P(")")
	g.P("\n")

	ascii(g, file)
	return g
}

func ascii(g *protogen.GeneratedFile, file *protogen.File) {
	const asciiArt = `
  _____          __ 
 / ___/___  ___ / /_	%s
/ /__ / -_)(_-</ __/	-------
\___/ \__//___/\__/ 	%s
`
	n := "CELESTINAL // " + strings.ToUpper(string(file.GoPackageName))
	s := fmt.Sprintf(asciiArt, n, *file.Proto.Package)
	g.P("const ASCII = `", s, "\n`")
	g.P("\n")

	g.P("// PrintASCII the ASCII art to the console.")
	g.P("func PrintASCII() {")
	g.P("\tfmt.Print(ASCII)")
	g.P("}")
	g.P("\n")
}
