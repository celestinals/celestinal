/*
 * Copyright 2025 The Tickex Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package code

import (
	"fmt"
	"strings"

	"github.com/tickexvn/tickex/api/gen/go/stdx/v1"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
)

// GenerateFile generates a _tickex.pb.go file containing gRPC service definitions.
func GenerateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	filename := file.GeneratedFilenamePrefix + "_tickex.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-tickex. DO NOT EDIT.")
	g.P("// Copyright 2025 Duc-Hung Ho")
	g.P()

	g.P("package ", file.GoPackageName)
	g.P("\n")
	g.P("import (")
	g.P("\t\"fmt\"\n")
	g.P()
	g.P("\t\"github.com/tickexvn/tickex/api/gen/go/stdx/v1\"\n")
	g.P(")")
	g.P("\n")

	ascii(g, file)

	for _, service := range file.Services {
		for _, method := range service.Methods {
			stdxOptsOf(g, service, method)
		}
	}

	return g
}

func ascii(g *protogen.GeneratedFile, file *protogen.File) {
	const asciiArt = `
 _______     __          
/_  __(_)___/ /_______ __	%s
 / / / / __/  '_/ -_) \ /	--------------
/_/ /_/\__/_/\_\\__/_\_\	%s
`
	n := "TICKEX // " + strings.ToUpper(string(file.GoPackageName))
	s := fmt.Sprintf(asciiArt, n, *file.Proto.Package)
	g.P("const ascii = `", s, "\n`")
	g.P("\n")

	g.P("// PrintASCII the ASCII art to the console.")
	g.P("func PrintASCII() {")
	g.P("\tfmt.Print(ascii)")
	g.P("}")
	g.P("\n")
}

func stdxOptsOf(g *protogen.GeneratedFile, service *protogen.Service, method *protogen.Method) {
	optVal := proto.GetExtension(method.Desc.Options(), stdx.E_Option)
	if optVal == nil {
		return
	}

	otp, ok := optVal.(*stdx.Options)
	if !ok {
		return
	}

	g.P("// StdxOptsOf", service.GoName, "_", method.GoName, " get options from service method")
	g.P("func StdxOptsOf", service.GoName, "_", method.GoName, "() *stdx.Options {")
	g.P("\toptions := stdx.Options{}")

	if otp.GetRoles() != nil {
		roleOpt := "[]stdx.Role{"
		for _, role := range otp.GetRoles() {
			roleOpt += "stdx.Role_" + role.String() + ", "
		}
		roleOpt = roleOpt[:len(roleOpt)-2]
		roleOpt += "}"

		g.P("\toptions.Roles = ", roleOpt)
	}

	g.P("\treturn &options")
	g.P("}")
	g.P("\n")
}
