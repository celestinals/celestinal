// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: ticket_domain.proto

package domain

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on GetTicketRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetTicketRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetTicketRequestValidationError is the validation error returned by
// GetTicketRequest.Validate if the designated constraints aren't met.
type GetTicketRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTicketRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTicketRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTicketRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTicketRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTicketRequestValidationError) ErrorName() string { return "GetTicketRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetTicketRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTicketRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTicketRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTicketRequestValidationError{}

// Validate checks the field values on CreateTicketRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateTicketRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CreateTicketRequestValidationError is the validation error returned by
// CreateTicketRequest.Validate if the designated constraints aren't met.
type CreateTicketRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTicketRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTicketRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTicketRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTicketRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTicketRequestValidationError) ErrorName() string {
	return "CreateTicketRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTicketRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTicketRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTicketRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTicketRequestValidationError{}

// Validate checks the field values on DeleteTicketRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteTicketRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteTicketRequestValidationError is the validation error returned by
// DeleteTicketRequest.Validate if the designated constraints aren't met.
type DeleteTicketRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTicketRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTicketRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTicketRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTicketRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTicketRequestValidationError) ErrorName() string {
	return "DeleteTicketRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTicketRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTicketRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTicketRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTicketRequestValidationError{}
