// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: tickex/ticket/v1/ticket.proto

package ticket

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on EditTicketRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *EditTicketRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// EditTicketRequestValidationError is the validation error returned by
// EditTicketRequest.Validate if the designated constraints aren't met.
type EditTicketRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditTicketRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditTicketRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditTicketRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditTicketRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditTicketRequestValidationError) ErrorName() string {
	return "EditTicketRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EditTicketRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditTicketRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditTicketRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditTicketRequestValidationError{}

// Validate checks the field values on EditTicketResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EditTicketResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// EditTicketResponseValidationError is the validation error returned by
// EditTicketResponse.Validate if the designated constraints aren't met.
type EditTicketResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditTicketResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditTicketResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditTicketResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditTicketResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditTicketResponseValidationError) ErrorName() string {
	return "EditTicketResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EditTicketResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditTicketResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditTicketResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditTicketResponseValidationError{}

// Validate checks the field values on StatusResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *StatusResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Message

	return nil
}

// StatusResponseValidationError is the validation error returned by
// StatusResponse.Validate if the designated constraints aren't met.
type StatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatusResponseValidationError) ErrorName() string { return "StatusResponseValidationError" }

// Error satisfies the builtin error interface
func (e StatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatusResponseValidationError{}

// Validate checks the field values on CreateTicketRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateTicketRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CreateTicketRequestValidationError is the validation error returned by
// CreateTicketRequest.Validate if the designated constraints aren't met.
type CreateTicketRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTicketRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTicketRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTicketRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTicketRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTicketRequestValidationError) ErrorName() string {
	return "CreateTicketRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTicketRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTicketRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTicketRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTicketRequestValidationError{}

// Validate checks the field values on CreateTicketResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateTicketResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTicketResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateTicketResponseValidationError is the validation error returned by
// CreateTicketResponse.Validate if the designated constraints aren't met.
type CreateTicketResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTicketResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTicketResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTicketResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTicketResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTicketResponseValidationError) ErrorName() string {
	return "CreateTicketResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTicketResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTicketResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTicketResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTicketResponseValidationError{}
