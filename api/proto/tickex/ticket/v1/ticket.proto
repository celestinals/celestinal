// Copyright 2025 The Tickex Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package tickex.ticket.v1;

import "tickex/ticket/shared/v1/ticket.proto";
import "tickex/stdx/v1/options.proto";

import "protoc-gen-openapiv2/options/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
// import "buf/validate/validate.proto";

option go_package = "github.com/tickexvn/tickex/api/gen/go/ticket/v1;ticket";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Ticket Service";
    version: "1.0";
  };
  schemes: HTTPS;
  schemes: HTTP;
  consumes: "application/json";
  security_definitions: {
    security: {
      key: "ApiKeyAuth";
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: "Authorization";
      }
    }
  }
  security: {
    security_requirement: {
      key: "ApiKeyAuth";
      value: {}
    }
  }
};

service TicketService {
  rpc Status(google.protobuf.Empty) returns (StatusResponse) {
    option (google.api.http) = {
      get: "/status"
    };

    option (tickex.stdx.v1.options) = {ignore: true};
  }

  rpc CreateTicket(CreateTicketRequest) returns (CreateTicketResponse) {
    option (google.api.http) = {
      post: "/ticket",
      body: "*",
    };

    option (tickex.stdx.v1.options) = {
      require: { role: ROLE_ADMIN, permission: PERMISSION_CREATE }
    };
  }

  rpc EditTicket(EditTicketRequest) returns (EditTicketResponse) {
    option (google.api.http) = {
      put: "/ticket",
      body: "*",
    };

    option (tickex.stdx.v1.options) = {
      require: [
        { role: ROLE_ADMIN, permission: PERMISSION_UPDATE_ANY },
        { role: ROLE_SELLER, permission: PERMISSION_UPDATE_OWN }
      ]
    };
  }
}

message EditTicketRequest {

}

message EditTicketResponse {

}

message StatusResponse {
  string message = 1;
}

message CreateTicketRequest {

}

message CreateTicketResponse {
  tickex.ticket.shared.v1.CreateTicketResponse data = 1;
}